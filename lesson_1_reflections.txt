How did viewing a diff between two versions of a file help you see the bug that
was introduced?
First it helped to highlight only the rows where changes were made so that it was
easier to focus on those lines only. It also allowed me to view the two different
versions right next to each other. This was very useful for further narrowing
down where the changes were.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
You may make a change and then decide you want the original back or have a question
about how the file worked at one point in time. This could save a lot of time
and effort when making changes in the future. It would also allow you to make
changes to the file without worrying about damaging anything. Easier to experiment
and learn new things without risk!

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?
Pros - Lets you set your commits logically
Cons - Could lose some work, open to human judgement, could be too many or too
few commits

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?
Git expects people to be using code and often having files that interact heavily
with one another. Google Docs expects people to typically have independent files
which are self contained.

How can you use the commands git log and git diff to view the history of files?
You can lose the command git log to view a description of all of the commits made
to a repository. git log --stat adds some more information. git diff compares two
commit ideas similar to the command line diff.

How might using version control make you more confident to make changes that
could break something?
Version control gives me more confidence to make changes to my code, even if that
change could take a while and may include several commits to make the change. I
will always be able to return to the version of the code that was working before
I started messin' around. Explore!

Now that you have your workspace set up, what do you want to try using Git for?
Fixing my work station to the way it was before.
